{"version":3,"sources":["components/ColoredButton.jsx","components/DialogTitleWithCloseIcon.jsx","components/FormDialog.jsx","components/subscription/stripe/StripeTextField.js","components/subscription/stripe/StripeCardForm.js","components/subscription/stripe/StripeIBANForm.js","components/subscription/AddBalanceDialog.js"],"names":["ColoredButton","props","color","children","theme","buttonTheme","createMuiTheme","palette","primary","main","buttonProps","memo","withTheme","paddingBottom","onClose","disabled","title","disablePadding","DialogTitle","style","spacing","paddingLeft","paddingRight","paddingTop","width","disableTypography","Box","display","justifyContent","Typography","variant","IconButton","onClick","marginRight","marginTop","aria-label","withStyles","dialogPaper","flexDirection","alignItems","maxWidth","actions","dialogPaperScrollPaper","maxHeight","dialogContent","classes","open","loading","headline","onFormSubmit","content","hideBackdrop","Dialog","disableBackdropClick","disableEscapeKeyDown","paper","paperScrollPaper","DialogContent","className","onSubmit","MyInputComponent","Component","component","inputRef","other","React","useImperativeHandle","focus","stripeOptions","StripeElement","select","rest","options","base","typography","body1","text","fontSize","fontSmoothing","secondary","invalid","iconColor","error","TextField","InputLabelProps","shrink","inputProps","InputProps","inputComponent","StripeCardForm","stripeError","setStripeError","amount","amountError","onAmountChange","name","setName","Grid","container","justify","item","xs","margin","required","label","value","onChange","event","target","fullWidth","autoFocus","autoComplete","type","parseInt","helperText","startAdornment","InputAdornment","position","CardElement","StripeIBANForm","email","setEmail","IbanElement","supportedCountries","stripePromise","loadStripe","paymentOptions","AddBalanceDialog","onSuccess","useState","setLoading","paymentOption","setPaymentOption","setAmount","setAmountError","elements","useElements","stripe","useStripe","getStripePaymentInfo","card","getElement","billing_details","sepa_debit","Error","FormDialog","a","preventDefault","createPaymentMethod","message","pb","mb","map","option","disableElevation","common","black","HighlightedInformation","renderPaymentComponent","Button","size","ButtonCircularProgress","Wrapper"],"mappings":"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","file":"static/js/13.ec78a1db.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\n\nfunction ColoredButton(props) {\n  const { color, children, theme } = props;\n  const buttonTheme = createMuiTheme({\n    ...theme,\n    palette: {\n      primary: {\n        main: color\n      }\n    }\n  });\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\n  return (\n    <MuiThemeProvider theme={buttonTheme}>\n      <Button {...buttonProps} color=\"primary\">\n        {children}\n      </Button>\n    </MuiThemeProvider>\n  );\n}\n\nColoredButton.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nexport default memo(ColoredButton);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  IconButton,\n  DialogTitle,\n  Typography,\n  Box,\n  withTheme\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nfunction DialogTitleWithCloseIcon(props) {\n  const {\n    theme,\n    paddingBottom,\n    onClose,\n    disabled,\n    title,\n    disablePadding\n  } = props;\n  return (\n    <DialogTitle\n      style={{\n        paddingBottom: paddingBottom\n          ? paddingBottom && disablePadding\n            ? 0\n            : paddingBottom\n          : theme.spacing(3),\n        paddingLeft: disablePadding ? 0 : null,\n        paddingRight: disablePadding ? 0 : null,\n        paddingTop: disablePadding ? 0 : theme.spacing(2),\n        width: \"100%\"\n      }}\n      disableTypography\n    >\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"h5\">{title}</Typography>\n        <IconButton\n          onClick={onClose}\n          style={{ marginRight: -12, marginTop: -10 }}\n          disabled={disabled}\n          aria-label=\"Close\"\n        >\n          <CloseIcon />\n        </IconButton>\n      </Box>\n    </DialogTitle>\n  );\n}\n\nDialogTitleWithCloseIcon.propTypes = {\n  theme: PropTypes.object,\n  paddingBottom: PropTypes.number,\n  onClose: PropTypes.func,\n  disabled: PropTypes.bool,\n  title: PropTypes.string,\n  disablePadding: PropTypes.bool\n};\n\nexport default withTheme(DialogTitleWithCloseIcon);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dialog, DialogContent, Box, withStyles } from \"@material-ui/core\";\nimport DialogTitleWithCloseIcon from \"./DialogTitleWithCloseIcon\";\n\nconst styles = theme => ({\n  dialogPaper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    paddingBottom: theme.spacing(3),\n    maxWidth: 420\n  },\n  actions: {\n    marginTop: theme.spacing(2)\n  },\n  dialogPaperScrollPaper: {\n    maxHeight: \"none\"\n  },\n  dialogContent: {\n    paddingTop: 0,\n    paddingBottom: 0\n  }\n});\n\n/**\n * A Wrapper around the Dialog component to create centered\n * Login, Register or other Dialogs.\n */\nfunction FormDialog(props) {\n  const {\n    classes,\n    open,\n    onClose,\n    loading,\n    headline,\n    onFormSubmit,\n    content,\n    actions,\n    hideBackdrop\n  } = props;\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      disableBackdropClick={loading}\n      disableEscapeKeyDown={loading}\n      classes={{\n        paper: classes.dialogPaper,\n        paperScrollPaper: classes.dialogPaperScrollPaper\n      }}\n      hideBackdrop={hideBackdrop ? hideBackdrop : false}\n    >\n      <DialogTitleWithCloseIcon\n        title={headline}\n        onClose={onClose}\n        disabled={loading}\n      />\n      <DialogContent className={classes.dialogContent}>\n        <form onSubmit={onFormSubmit}>\n          <div>{content}</div>\n          <Box width=\"100%\" className={classes.actions}>\n            {actions}\n          </Box>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nFormDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  headline: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  onFormSubmit: PropTypes.func.isRequired,\n  content: PropTypes.element.isRequired,\n  actions: PropTypes.element.isRequired,\n  hideBackdrop: PropTypes.bool.isRequired\n};\n\nexport default withStyles(styles, { withTheme: true })(FormDialog);\n","import React from \"react\";\nimport { TextField, withTheme } from \"@material-ui/core\";\n\nfunction MyInputComponent(props) {\n  const { component: Component, inputRef, ...other } = props;\n\n  // implement `InputElement` interface\n  React.useImperativeHandle(inputRef, () => ({\n    focus: () => {\n      // logic to focus the rendered component from 3rd party belongs here\n    }\n    // hiding the value e.g. react-stripe-elements\n  }));\n\n  // `Component` will be your `SomeThirdPartyComponent` from below\n  return <Component {...other} />;\n}\n\nfunction StripeTextField(props) {\n  const { stripeOptions, StripeElement, select, theme, ...rest } = props;\n  const options = {\n    style: {\n      base: {\n        ...theme.typography.body1,\n        color: theme.palette.text.primary,\n        fontSize: \"16px\",\n        fontSmoothing: \"antialiased\",\n        \"::placeholder\": {\n          color: theme.palette.text.secondary\n        }\n      },\n      invalid: {\n        iconColor: theme.palette.error.main,\n        color: theme.palette.error.main\n      }\n    },\n    ...stripeOptions\n  };\n  return (\n    <TextField\n      InputLabelProps={{\n        shrink: true\n      }}\n      inputProps={{ component: StripeElement, options: options }}\n      InputProps={{\n        inputComponent: MyInputComponent\n      }}\n      {...rest}\n    />\n  );\n}\n\nexport default withTheme(StripeTextField);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, Grid, InputAdornment } from \"@material-ui/core\";\nimport { CardElement } from \"@stripe/react-stripe-js\";\nimport StripeTextField from \"./StripeTextField\";\n\nfunction StripeCardForm(props) {\n  const {\n    stripeError,\n    setStripeError,\n    amount,\n    amountError,\n    onAmountChange,\n    name,\n    setName\n  } = props;\n  return (\n    <Grid container spacing={2} justify=\"space-between\">\n      <Grid item xs={8}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"none\"\n          required\n          label=\"Your Name\"\n          value={name}\n          onChange={event => {\n            setName(event.target.value);\n          }}\n          fullWidth\n          autoFocus\n          autoComplete=\"off\"\n          type=\"text\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField\n          required\n          value={amount}\n          onChange={event => {\n            onAmountChange(parseInt(event.target.value));\n          }}\n          error={amountError ? true : false}\n          helperText={amountError}\n          variant=\"outlined\"\n          fullWidth\n          type=\"number\"\n          margin=\"none\"\n          label=\"Amount\"\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <StripeTextField\n          margin=\"none\"\n          fullWidth\n          label=\"Credit Card\"\n          error={stripeError ? true : false}\n          helperText={stripeError}\n          variant=\"outlined\"\n          required\n          StripeElement={CardElement}\n          onChange={() => {\n            if (stripeError) {\n              setStripeError(\"\");\n            }\n          }}\n        ></StripeTextField>\n      </Grid>\n    </Grid>\n  );\n}\n\nStripeCardForm.propTypes = {\n  stripeError: PropTypes.string.isRequired,\n  setStripeError: PropTypes.func.isRequired,\n  amount: PropTypes.number.isRequired,\n  onAmountChange: PropTypes.func.isRequired,\n  amountError: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired\n};\n\nexport default StripeCardForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, Grid, InputAdornment } from \"@material-ui/core\";\nimport StripeTextField from \"./StripeTextField\";\nimport { IbanElement } from \"@stripe/react-stripe-js\";\n\nfunction StripeIBANForm(props) {\n  const {\n    stripeError,\n    setStripeError,\n    amount,\n    amountError,\n    onAmountChange,\n    name,\n    setName,\n    email,\n    setEmail\n  } = props;\n  return (\n    <Grid container spacing={2} justify=\"space-between\">\n      <Grid item xs={8}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"none\"\n          required\n          label=\"Your Name\"\n          value={name}\n          onChange={event => {\n            setName(event.target.value);\n          }}\n          fullWidth\n          autoFocus\n          autoComplete=\"off\"\n          type=\"text\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <TextField\n          required\n          value={amount}\n          onChange={event => {\n            onAmountChange(parseInt(event.target.value));\n          }}\n          error={amountError ? true : false}\n          helperText={amountError}\n          variant=\"outlined\"\n          fullWidth\n          type=\"number\"\n          margin=\"none\"\n          label=\"Amount\"\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <TextField\n          required\n          variant=\"outlined\"\n          fullWidth\n          value={email}\n          onChange={event => {\n            setEmail(event.target.value);\n          }}\n          type=\"email\"\n          margin=\"none\"\n          label=\"Email\"\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <StripeTextField\n          margin=\"none\"\n          variant=\"outlined\"\n          fullWidth\n          label=\"IBAN\"\n          error={stripeError ? true : false}\n          helperText={stripeError}\n          required\n          StripeElement={IbanElement}\n          stripeOptions={{ supportedCountries: [\"SEPA\"] }}\n          onChange={() => {\n            if (stripeError) {\n              setStripeError(\"\");\n            }\n          }}\n        ></StripeTextField>\n      </Grid>\n    </Grid>\n  );\n}\n\nStripeIBANForm.propTypes = {\n  stripeError: PropTypes.string.isRequired,\n  setStripeError: PropTypes.func.isRequired,\n  amount: PropTypes.number.isRequired,\n  onAmountChange: PropTypes.func.isRequired,\n  amountError: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  setName: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  setEmail: PropTypes.func.isRequired\n};\n\nexport default StripeIBANForm;\n","import React, { useState, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  CardElement,\n  IbanElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport { Grid, Button, Box, withTheme } from \"@material-ui/core\";\nimport StripeCardForm from \"./stripe/StripeCardForm\";\nimport StripeIbanForm from \"./stripe/StripeIBANForm\";\nimport FormDialog from \"../FormDialog\";\nimport ColoredButton from \"../ColoredButton\";\nimport HighlightedInformation from \"../HighlightedInformation\";\nimport ButtonCircularProgress from \"../ButtonCircularProgress\";\n\nconst stripePromise = loadStripe(\"pk_test_6pRNASCoBOKtIshFeQd4XMUh\");\n\nconst paymentOptions = [\"Credit Card\", \"SEPA Direct Debit\"];\n\nconst AddBalanceDialog = withTheme(function (props) {\n  const { open, theme, onClose, onSuccess } = props;\n\n  const [loading, setLoading] = useState(false);\n  const [paymentOption, setPaymentOption] = useState(\"Credit Card\");\n  const [stripeError, setStripeError] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [amountError, setAmountError] = useState(\"\");\n  const elements = useElements();\n  const stripe = useStripe();\n\n  const onAmountChange = amount => {\n    if (amount < 0) {\n      return;\n    }\n    if (amountError) {\n      setAmountError(\"\");\n    }\n    setAmount(amount);\n  };\n\n  const getStripePaymentInfo = () => {\n    switch (paymentOption) {\n      case \"Credit Card\": {\n        return {\n          type: \"card\",\n          card: elements.getElement(CardElement),\n          billing_details: { name: name }\n        };\n      }\n      case \"SEPA Direct Debit\": {\n        return {\n          type: \"sepa_debit\",\n          sepa_debit: elements.getElement(IbanElement),\n          billing_details: { email: email, name: name }\n        };\n      }\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  const renderPaymentComponent = () => {\n    switch (paymentOption) {\n      case \"Credit Card\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeCardForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                name={name}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the credit card number{\" \"}\n              <b>4242 4242 4242 4242 04 / 24 24 242 42424</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      case \"SEPA Direct Debit\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeIbanForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                setEmail={setEmail}\n                name={name}\n                email={email}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the IBAN\n              <br />\n              <b>DE89370400440532013000</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  return (\n    <FormDialog\n      open={open}\n      onClose={onClose}\n      headline=\"Add Balance\"\n      hideBackdrop={false}\n      loading={loading}\n      onFormSubmit={async event => {\n        event.preventDefault();\n        if (amount <= 0) {\n          setAmountError(\"Can't be zero\");\n          return;\n        }\n        if (stripeError) {\n          setStripeError(\"\");\n        }\n        setLoading(true);\n        const { error } = await stripe.createPaymentMethod(\n          getStripePaymentInfo()\n        );\n        if (error) {\n          setStripeError(error.message);\n          setLoading(false);\n          return;\n        }\n        onSuccess();\n      }}\n      content={\n        <Box pb={2}>\n          <Box mb={2}>\n            <Grid container spacing={1}>\n              {paymentOptions.map(option => (\n                <Grid item key={option}>\n                  <ColoredButton\n                    variant={\n                      option === paymentOption ? \"contained\" : \"outlined\"\n                    }\n                    disableElevation\n                    onClick={() => {\n                      setStripeError(\"\");\n                      setPaymentOption(option);\n                    }}\n                    color={theme.palette.common.black}\n                  >\n                    {option}\n                  </ColoredButton>\n                </Grid>\n              ))}\n            </Grid>\n          </Box>\n          {renderPaymentComponent()}\n        </Box>\n      }\n      actions={\n        <Fragment>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"secondary\"\n            type=\"submit\"\n            size=\"large\"\n            disabled={loading}\n          >\n            Pay with Stripe {loading && <ButtonCircularProgress />}\n          </Button>\n        </Fragment>\n      }\n    />\n  );\n});\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  theme: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nfunction Wrapper(props) {\n  const { open, onClose, onSuccess } = props;\n  return (\n    <Elements stripe={stripePromise}>\n      {open && (\n        <AddBalanceDialog open={open} onClose={onClose} onSuccess={onSuccess} />\n      )}\n    </Elements>\n  );\n}\n\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nexport default Wrapper;\n"],"sourceRoot":""}