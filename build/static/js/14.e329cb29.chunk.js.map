{"version":3,"sources":["components/ColoredButton.jsx","components/Dropzone.jsx"],"names":["ColoredButton","props","color","children","theme","buttonTheme","createMuiTheme","palette","primary","main","buttonProps","memo","getColor","isDragAccept","isDragReject","success","error","dark","common","black","withStyles","button","borderWidth","borderColor","borderTopLeftRadius","borderBottomLeftRadius","fullHeight","height","withTheme","onDrop","accept","classes","style","useDropzone","getRootProps","getInputProps","fullWidth","className","classNames","variant"],"mappings":"kLAIA,SAASA,EAAcC,GAAQ,IACrBC,EAA2BD,EAA3BC,MAAOC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACnBC,EAAcC,YAAe,2BAC9BF,GAD6B,IAEhCG,QAAS,CACPC,QAAS,CACPC,KAAMP,OAINQ,EAAe,cAAGR,MAAH,EAAUE,MAAV,EAAiBD,SAAjB,oDAAyCF,GAC9D,OACE,cAAC,IAAD,CAAkBG,MAAOC,EAAzB,SACE,cAAC,IAAD,2BAAYK,GAAZ,IAAyBR,MAAM,UAA/B,SACGC,OAUMQ,mBAAKX,I,sHCTpB,SAASY,EAASC,EAAcC,EAAcV,GAC5C,OAAIS,EACKT,EAAMG,QAAQQ,QAAQN,KAE3BK,EACKV,EAAMG,QAAQS,MAAMC,KAEtBb,EAAMG,QAAQW,OAAOC,MA2CfC,sBA9DA,CACbC,OAAQ,CACNC,YAAa,EACbC,YAAa,sBACbC,oBAAqB,EACrBC,uBAAwB,GAE1BC,WAAY,CACVC,OAAQ,SAsDsB,CAAEC,WAAW,GAAhCR,EAxCf,SAAkBnB,GAAQ,IAChB4B,EAAgE5B,EAAhE4B,OAAQC,EAAwD7B,EAAxD6B,OAAQJ,EAAgDzB,EAAhDyB,WAAYvB,EAAoCF,EAApCE,SAAU4B,EAA0B9B,EAA1B8B,QAASC,EAAiB/B,EAAjB+B,MAAO5B,EAAUH,EAAVG,MADvC,EAOnB6B,YAAY,CACdH,OAAQA,EACRD,OAAQA,IANRK,EAHqB,EAGrBA,aACAC,EAJqB,EAIrBA,cACAtB,EALqB,EAKrBA,aACAC,EANqB,EAMrBA,aAKF,OACE,eAAC,IAAD,2BAASoB,KAAT,IAAyBP,OAAO,OAAhC,UACE,qCAAWQ,MACX,cAAC,IAAD,CACEC,WAAS,EACTC,UAAWC,IACTZ,EAAaK,EAAQL,WAAa,KAClCK,EAAQV,QAEVkB,QAAQ,WACRrC,MAAOU,EAASC,EAAcC,EAAcV,GAC5C4B,MAAOA,EART,SAUG7B","file":"static/js/14.e329cb29.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\n\nfunction ColoredButton(props) {\n  const { color, children, theme } = props;\n  const buttonTheme = createMuiTheme({\n    ...theme,\n    palette: {\n      primary: {\n        main: color\n      }\n    }\n  });\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\n  return (\n    <MuiThemeProvider theme={buttonTheme}>\n      <Button {...buttonProps} color=\"primary\">\n        {children}\n      </Button>\n    </MuiThemeProvider>\n  );\n}\n\nColoredButton.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nexport default memo(ColoredButton);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDropzone } from \"react-dropzone\";\nimport classNames from \"classnames\";\nimport { Box, withStyles } from \"@material-ui/core\";\nimport ColoredButton from \"./ColoredButton\";\n\nconst styles = {\n  button: {\n    borderWidth: 1,\n    borderColor: \"rgba(0, 0, 0, 0.23)\",\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  },\n  fullHeight: {\n    height: \"100%\"\n  }\n};\n\nfunction getColor(isDragAccept, isDragReject, theme) {\n  if (isDragAccept) {\n    return theme.palette.success.main;\n  }\n  if (isDragReject) {\n    return theme.palette.error.dark;\n  }\n  return theme.palette.common.black;\n}\n\nfunction Dropzone(props) {\n  const { onDrop, accept, fullHeight, children, classes, style, theme } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: accept,\n    onDrop: onDrop\n  });\n  return (\n    <Box {...getRootProps()} height=\"100%\">\n      <input {...getInputProps()} />\n      <ColoredButton\n        fullWidth\n        className={classNames(\n          fullHeight ? classes.fullHeight : null,\n          classes.button\n        )}\n        variant=\"outlined\"\n        color={getColor(isDragAccept, isDragReject, theme)}\n        style={style}\n      >\n        {children}\n      </ColoredButton>\n    </Box>\n  );\n}\n\nDropzone.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired,\n  onDrop: PropTypes.func,\n  accept: PropTypes.string,\n  fullHeight: PropTypes.bool,\n  style: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n};\n\nexport default withStyles(styles, { withTheme: true })(Dropzone);\n"],"sourceRoot":""}